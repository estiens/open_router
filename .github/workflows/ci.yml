name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint (Ruby 3.3)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Run RuboCop
      run: bundle exec rubocop --format github

  test-unit:
    runs-on: ubuntu-latest
    name: Unit Tests (Ruby 3.3)

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby 3.3
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true

    - name: Run unit tests
      run: bundle exec rspec --exclude-pattern "spec/vcr/**/*_spec.rb" --format progress --format documentation --out test-results.txt
      env:
        # Dummy API key for any mocked tests
        OPENROUTER_API_KEY: "dummy-api-key-for-testing-do-not-use"

    - name: Display test results
      if: always()
      run: |
        if [ -f test-results.txt ]; then
          echo "üìä Test Results:"
          cat test-results.txt
        fi

  test-vcr:
    runs-on: ubuntu-latest
    name: VCR Integration Tests (Ruby 3.3)

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby 3.3
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true

    - name: Run VCR tests with cassettes
      run: bundle exec rspec spec/vcr --format progress --tag ~skip
      env:
        # In CI, VCR uses cassettes only (no real API calls)
        CI: true
        VCR_RECORD: none
        # Dummy API key (cassettes are used, no real requests)
        OPENROUTER_API_KEY: "dummy-api-key-for-testing-do-not-use"
      continue-on-error: true

    - name: Report VCR test status
      if: always()
      run: |
        echo "‚úÖ VCR tests completed (pending tests are expected)"
        echo "üí° To re-record cassettes locally, run: VCR_RECORD_ALL=true bundle exec rspec spec/vcr"

  security:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Run bundle audit
      run: |
        gem install bundle-audit
        bundle audit --update
        
    - name: Check for secrets
      run: |
        # Simple check for potential secrets in code
        if grep -r "sk-" lib/ || grep -r "API_KEY.*=" lib/ || grep -r "token.*=" lib/; then
          echo "‚ö†Ô∏è  Potential secrets found in code"
          exit 1
        else
          echo "‚úÖ No obvious secrets found"
        fi

  quality:
    runs-on: ubuntu-latest
    name: Code Quality
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.3'
        bundler-cache: true
    
    - name: Check code metrics
      run: |
        # Count lines of code
        echo "üìä Code Statistics:"
        find lib -name "*.rb" | xargs wc -l | tail -1
        
        # Check for complex files
        echo "üìÅ File Complexity:"
        find lib -name "*.rb" -exec wc -l {} + | sort -n | tail -5
        
        # Check test coverage
        echo "üß™ Test Files:"
        find spec -name "*_spec.rb" | wc -l | awk '{print $1 " test files"}'
        
    - name: Documentation check
      run: |
        echo "üìö Documentation Status:"
        [ -f README.md ] && echo "‚úÖ README.md exists" || echo "‚ùå README.md missing"
        [ -f CHANGELOG.md ] && echo "‚úÖ CHANGELOG.md exists" || echo "‚ùå CHANGELOG.md missing" 
        [ -f CODE_OF_CONDUCT.md ] && echo "‚úÖ CODE_OF_CONDUCT.md exists" || echo "‚ùå CODE_OF_CONDUCT.md missing"
        [ -f CONTRIBUTING.md ] && echo "‚úÖ CONTRIBUTING.md exists" || echo "‚ùå CONTRIBUTING.md missing"